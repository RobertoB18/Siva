// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model user{
  id Int @id @default(autoincrement())
  userName String @db.VarChar(512)
  email String @unique
  password String ?
  store StoreUser[]
}

model store{
  id Int @id @default(autoincrement())
  name String
  address String
  phone String
  email String
  logo String?
  idApi String? @unique
  razonSocial String?
  regimenFiscal String?
  key String?
  descuento Int? @default(70)
  
  user StoreUser[]
  clientes  clientes[]
  sales    Sale[]
  products products[]
  buys     buy[]
  provider Provider[]
  facturas facturas[]
}

model StoreUser{
  storeId Int
  userId Int
  permissions String[] @default([]) // Ej: ["ventas", "compras"]

  storeRef store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userRef user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, storeId])
}

model facturas{
  id Int @id @default(autoincrement())
  storeId Int
  clienteId Int
  idFactura String
  date DateTime @default(now())

  clientes clientes @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  store store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Sale {
  id       Int    @id @default(autoincrement())
  storeId  Int
  clienteId Int ?  // cliente id
  productos Json
  date     DateTime @default(now())
  subtotal Float @default(0)
  descuento Int? @default(0)
  total    Float
  status Boolean @default(false)
  
  clientes clientes? @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  store store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model clientes{
  id Int @id @default(autoincrement())
  storeId  Int
  name String
  rfc String? @db.VarChar(512)
  razonSocial String? @db.VarChar(512)
  regimenFiscal String? @db.VarChar(512) 
  phone String
  email String
  address String
  status Boolean ?
  
  store    store   @relation(fields: [storeId], references: [id])
  sale    Sale[]
  factura facturas[]
}

model products{
  id Int @id @default(autoincrement())
  storeId Int
  name String
  priceCost Int
  priceMen Int
  stockMin Int
  stock Int
  unity String @map("unities")
  unityCode String?
  description String
  status Boolean
  codesat String
  unitsPerPackage Int? @default(0)
  priceMay Int?
  mayQuantity Int?
  codeBar String? 

  store store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model buy{
  id Int @id @default(autoincrement())
  storeId Int
  providerId Int?
  productos Json
  date     DateTime @default(now())
  codeFactura String
  total    Float

  provider Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)
  store store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Provider{
  id Int @id @default(autoincrement())
  name String
  phone String
  email String
  address String
  rfc String
  storeId Int
  codeProvider String?
  status Boolean

  store store @relation(fields: [storeId], references: [id])
  buys buy[]
}

